{"mappings":"qdAoBO,SAAkBA,MACsB,kBAAmBC,UAAAA,IAExDC,IAAgBC,SAAAA,EAA4BC,OAAOC,SAASC,MACpDC,SAAWH,OAAOC,SAASE,cAOzCH,OAAOI,iBAAiB,QAAQ,eACxBC,EAAAA,GAAAA,YAAAA,EAAAA,sBAEFC,IA8DV,SAAiCD,EAAOT,GAEtCW,MAAMF,EAAAA,CACJG,QAAAA,CAAWC,iBAAkB,YAE5BC,MAAK,SAACC,OAECC,EAAcD,EAASH,QAAQK,IAAI,gBACjB,MAApBF,EAASG,QAAkC,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAEzElB,UAAUmB,cAAcC,MAAMP,MAAK,SAACQ,GAClCA,EAAaC,aAAaT,MAAK,WAC7BV,OAAOC,SAASmB,eAKpBC,EAAgBhB,EAAOT,MAG1B0B,OAAM,WACLC,QAAQC,IAAI,oEAjFVC,CAAwBpB,EAAOT,GAI/BC,UAAUmB,cAAcC,MAAMP,MAAK,WACjCa,QAAQC,IACN,iHAKJH,EAAgBhB,EAAOT,2BA0ExB,WACD,kBAAmBC,WACrBA,UAAUmB,cAAcC,MACrBP,MAAK,SAACQ,GACLA,EAAaC,gBAEdG,OAAM,SAACI,GACNH,QAAQG,MAAMA,EAAMC,gCApHtBrB,EAAcsB,QACW,cAA7B5B,OAAOC,SAAS4B,UAEe,UAA7B7B,OAAOC,SAAS4B,UAEhB7B,OAAOC,SAAS4B,SAASC,MAAM,2DAoCnC,SAAAT,EAAyBhB,EAAOT,GAC9BC,UAAUmB,cACPe,SAAS1B,GACTK,MAAK,SAACQ,GACLA,EAAac,cAAgB,eACrBC,EAAmBf,EAAagB,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfvC,UAAUmB,cAAcqB,YAI1Bd,QAAQC,IACN,iHAIE5B,GAAUA,EAAO0C,UACnB1C,EAAO0C,SAASpB,KAMlBK,QAAQC,IAAI,sCAGR5B,GAAUA,EAAO2C,WACnB3C,EAAO2C,UAAUrB,WAO5BI,OAAM,SAACI,GACNH,QAAQG,MAAM,4CAA6CA,2zCC1FjD,uaCIVc,EAAU,SAAAC,OAAGC,EAAAA,EAAAA,+CACZC,UAAU,0CACRA,UAAU,uBACRC,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAGC,yCACxBC,IAAAA,SAAAA,OAAcD,EAAI,GAAKL,UAAU,QACnCD,SAOXF,EAAQU,UAAAA,CACNR,SAAAA,EAAAA,QAAoBS,KAAKC,cAGZZ,8ECjBC,wJCAE,4EAEPa,KAAK,IAAIC,UAAAA,EAAAA,uNCCR,sDACAC,SAAAA,EAAAA,QAAAA,cAAAA,EAAAA,QAAAA,kCACOC,cAAAA,iQCJVC,OAAAA,EAAAA,QAAAA,cAAAA,EAAAA,QAAAA,MAAgBC,SAASC,eAAe,QAMjDC,EAAc7B","sources":["./src/service-worker.js","./src/components/Loading.jsx","./src/components/Animation/Cracked.jsx","./src/pages/Landing.jsx","./src/routes/AppRoutes.jsx","./src/App.jsx","./src/index.jsx"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Loading = () => <></>;\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './slicer.scss';\nimport './cracked.css';\n\nconst Cracked = ({ children }) => (\n  <div className=\"bg-text\">\n    <div className=\"slicer-gradient\">\n      {new Array(40).fill(1).map((_, i) => (\n        <div key={`slice-${i + 1}`} className=\"text\">\n          {children}\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nCracked.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Cracked;\n","import React from 'react';\nimport Cracked from 'app/components/Animation/Cracked';\n\nimport './Landing.css';\n\nconst Landing = () => <Cracked>parcel-project</Cracked>;\n\nexport default Landing;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Landing from 'app/pages/Landing';\n\nconst AppRoutes = () => (\n  <Switch>\n    <Route path=\"/\" component={Landing} />\n  </Switch>\n);\n\nexport default AppRoutes;\n","import React, { Suspense } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'app/theme';\n\nimport Loading from 'app/components/Loading';\nimport AppRoutes from 'app/routes/AppRoutes';\n\nconst App = () => (\n  <Suspense fallback={<Loading />}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <AppRoutes />\n    </BrowserRouter>\n  </Suspense>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from 'app/service-worker';\nimport App from 'app/App';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"names":["config","navigator","publicUrl","URL","window","location","href","origin","addEventListener","swUrl","$536e947571314f283b8349190ee319d7$var$isLocalhost","fetch","headers","Service-Worker","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","$536e947571314f283b8349190ee319d7$var$registerValidSW","catch","console","log","$536e947571314f283b8349190ee319d7$var$checkValidServiceWorker","error","message","Boolean","hostname","match","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","$5090c592d9219f08eada93eb6325a064$var$Cracked","_ref","children","className","Array","fill","map","_","i","key","propTypes","node","isRequired","path","component","fallback","basename","render","document","getElementById","$5c3ac22a8c7529b6d91b33d5b23fc1d0$var$serviceWorker"],"version":3,"file":"index.js.map"}